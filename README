pylogram
========

A very simple declarative linear equation solver and drawing package.

A reimplementation of Mark Dominus' linogram, described in:

 Several blog posts (reverse order) at http://blog.plover.com/linogram/
 Source code on github at https://github.com/mjdominus/Linogram
 Originally developed in the book Higher Order Perl (http://hop.perl.plover.com/book/)

An example of use to solve a set of linear equations would be:
 
    from pylogram import constrain, default_vars as vars
    constrain(   vars.a + vars.b   == 2  ,
               2*vars.a + vars.b/3 == -7 )
    print( "a , b =", vars.a, ",", vars.b ) # -23/5 , 33/5

An example of geometric drawing would be:

    from pylogram.draw import *
    class Lollypop:
        def __init__(self):
            stick = Line()
            circ = Circle()
            circ.bottom [:]= stick.pt2
            stick.pt1.x [:]= stick.pt2.x
            stick.pt2.y - stick.pt1.y [:]= circ.d * 2
            self.bottom [:]= stick.pt2
            self.height [:]= (stick.pt2.y - stick.pt1.y) + circ.d
    lollypop = Lollypop()
    lollypop.bottom = Point(0,0)
    lollypop.height = 6
    assert lollypop.circ.center = Point(0,5)
      
Drawing isn't implemented yet.
 